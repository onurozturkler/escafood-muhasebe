import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { db } from "../firebase";
import { doc, getDoc } from "firebase/firestore";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const TahsilatDetay = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [tahsilat, setTahsilat] = useState(null);
    const [musteri, setMusteri] = useState(null);
    const [loading, setLoading] = useState(true);

    // ðŸ“Œ Verileri Firestore'dan Ã§ek
    useEffect(() => {
        const fetchTahsilat = async () => {
            try {
                const tahsilatRef = doc(db, "tahsilatlar", id);
                const tahsilatSnap = await getDoc(tahsilatRef);

                if (!tahsilatSnap.exists()) {
                    alert("Tahsilat bulunamadÄ±!");
                    navigate("/tahsilatlar");
                    return;
                }

                const tahsilatData = { id: tahsilatSnap.id, ...tahsilatSnap.data() };
                setTahsilat(tahsilatData);
                fetchMusteriBilgileri(tahsilatData.musteriId);
            } catch (error) {
                console.error("Tahsilat verisi alÄ±nÄ±rken hata oluÅŸtu:", error);
            }
        };

        const fetchMusteriBilgileri = async (musteriId) => {
            try {
                const musteriRef = doc(db, "musteriler", musteriId);
                const musteriSnap = await getDoc(musteriRef);

                if (musteriSnap.exists()) {
                    setMusteri(musteriSnap.data());
                }
            } catch (error) {
                console.error("MÃ¼ÅŸteri verisi alÄ±nÄ±rken hata oluÅŸtu:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchTahsilat();
    }, [id, navigate]);

    // ðŸ“Œ SayÄ± formatlayÄ±cÄ± fonksiyon
    const formatNumber = (num) => {
        return `â‚º${(num || 0).toLocaleString("tr-TR", {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
        })}`;
    };

    // ðŸ“Œ PDF Ä°ndir Fonksiyonu
    const handlePDFDownload = () => {
        if (!tahsilat || !musteri) {
            alert("Tahsilat veya mÃ¼ÅŸteri bilgisi eksik! LÃ¼tfen tekrar deneyin.");
            return;
        }

        const doc = new jsPDF();
        doc.setFont("times", "normal");
        doc.setLanguage("tr");

        // ðŸ“Œ Åžirket Bilgileri
        doc.setFontSize(18);
        doc.text("Tahsilat Makbuzu", 80, 20);
        doc.setFontSize(12);
        doc.text("ESCA FOOD GIDA DIÅž TÄ°CARET SANAYÄ° ANONÄ°M ÅžÄ°RKETÄ°", 14, 40);
        doc.text("Yeni BaÄŸlÄ±ca Mah Etimesgut Blv No: 6H/A", 14, 50);
        doc.text("Etimesgut, ANKARA â€“ TÃ¼rkiye", 14, 60);
        doc.text("Vergi No: 3770983099 (Etimesgut)", 14, 70);

        // ðŸ“Œ MÃ¼ÅŸteri Bilgileri
        doc.setFontSize(14);
        doc.text("SayÄ±n:", 120, 40);
        doc.text(musteri.musteriAdi || "-", 120, 50);
        doc.text("Adres:", 120, 60);
        doc.text(musteri.adres || "-", 120, 70);

        // ðŸ“Œ SayÄ±larÄ± dÃ¼zgÃ¼n formatla
        const tahsilatTutari = formatNumber(tahsilat.tahsilatTutari);
        const tahsilatSonrasiCariHesap = formatNumber((musteri.carihesap || 0) - tahsilat.tahsilatTutari);

        // ðŸ“Œ Tahsilat Tablosu
        autoTable(doc, {
            startY: 90,
            head: [["Belge No", "Tarih", "Tahsilat TÃ¼rÃ¼", "AÃ§Ä±klama", "Tahsilat TutarÄ±"]],
            body: [[
                tahsilat.tahsilatNo || "-",
                new Date(tahsilat.tarih || Date.now()).toLocaleDateString("tr-TR"),
                tahsilat.tahsilatTuru || "-",
                tahsilat.aciklama || "-",
                tahsilatTutari
            ]],
            styles: { fontSize: 10 },
        });

        // ðŸ“Œ Toplam Tutar
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`Tahsilat ToplamÄ±: ${tahsilatTutari}`, 14, doc.lastAutoTable.finalY + 10);

        // ðŸ“Œ Tahsilat sonrasÄ± cari hesap
        doc.setTextColor(tahsilatSonrasiCariHesap.includes("-") ? "red" : "black");
        doc.text(
            `Tahsilat SonrasÄ± Cari Hesap: ${tahsilatSonrasiCariHesap}`,
            14,
            doc.lastAutoTable.finalY + 20
        );

        doc.save(`Tahsilat_Makbuzu_${tahsilat.tahsilatNo || "Bilinmiyor"}.pdf`);
    };

    if (loading) return <p>Veriler yÃ¼kleniyor...</p>;
    if (!tahsilat || !musteri) return <p className="text-red-500 font-bold">Veri bulunamadÄ±!</p>;

    return (
        <div>
            <h2>Tahsilat DetayÄ±</h2>
            <p><strong>Tahsilat No:</strong> {tahsilat.tahsilatNo}</p>
            <p><strong>Tarih:</strong> {new Date(tahsilat.tarih).toLocaleDateString("tr-TR")}</p>
            <p><strong>MÃ¼ÅŸteri:</strong> {musteri.musteriAdi}</p>
            <p><strong>Tahsilat TutarÄ±:</strong> {formatNumber(tahsilat.tahsilatTutari)}</p>
            <p><strong>Tahsilat TÃ¼rÃ¼:</strong> {tahsilat.tahsilatTuru}</p>
            <p><strong>AÃ§Ä±klama:</strong> {tahsilat.aciklama}</p>

            <button onClick={handlePDFDownload}>PDF Ä°ndir</button>
        </div>
    );
};

export default TahsilatDetay;
